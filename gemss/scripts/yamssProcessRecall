#!/bin/bash
############################################################################
# Copyright 2008-2012 Istituto Nazionale di Fisica Nucleare
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
############################################################################

# print PID for logger
echo $$

. /usr/local/yamss/bin/yamssCommands
. /usr/local/yamss/bin/yamssGlobalFunctions

device=$1
     
mountpoint=$(cat /proc/mounts | grep "^/dev/$device " | awk '{print $2}')

SYSTEM_DIRECTORY_PATH=$mountpoint/system

if [ ! -f $mountpoint/system/YAMSS_CONFIG/hsmConfig ]; then
  echo "Error: missing hsmConfig file in system directory"
  exit 1
fi
  
. $mountpoint/system/YAMSS_CONFIG/hsmConfig


LOCKDIR=$SYSTEM_DIRECTORY_PATH/YAMSS_LOCK
RECALLDIR=$SYSTEM_DIRECTORY_PATH/YAMSS_RECALL
STATDIR=$SYSTEM_DIRECTORY_PATH/YAMSS_STAT
DRAINDIR=$SYSTEM_DIRECTORY_PATH/YAMSS_DRAIN
DMERRORDIR=$SYSTEM_DIRECTORY_PATH/YAMSS_DMERROR



# check if drain file is present
if [ -f $DRAINDIR/recall.drain ]; then
   exit 0
fi

# count number of file ordered tape lists pending. If zero exit immediately
numreclists=$(ls $RECALLDIR | grep filelist.ordered.tape | egrep -v running | egrep -v filelist.ordered.tape.00000000 | wc -l)

if [ "$numreclists"x = "0x" ]; then
   exit 0
fi

# acquire lock on recall queue
lockfile -1 -l600 $LOCKDIR/recall.queue.lock

# first look for the oldest tape ordered file list and see whether the date is over threshold
# this avoids recall starvation
recfile=0
now=$(date +%s)
reclist=$(ls -lrt --time-style=+%s $RECALLDIR | grep filelist.ordered.tape | egrep -v running | egrep -v filelist.ordered.tape.00000000 | awk -v now=$now -v maxret=$RECALL_MAX_RETENTION -v recalldir=$RECALLDIR '{if((now-$6)>maxret) print recalldir"/"$7}')
for file in $reclist; do
   # try to acquire lock for tape
   lockfile -1 -r1 $LOCKDIR/recall.$(basename $file) 2>/dev/null
   if [ $? -eq 0 ]; then
      recfile=$file
      break
   fi
done

# then look for the tape ordered file with the largest number of files
if [ "$recfile"x = "0x" ]; then
  reclist=$(for file in $(ls $RECALLDIR | grep filelist.ordered.tape | egrep -v running | egrep -v filelist.ordered.tape.00000000); do wc -l $RECALLDIR/$file; done | sort -g -r | awk '{print $2}') 
  for file in $reclist; do
     # try to acquire lock for tape
     lockfile -1 -r1 $LOCKDIR/recall.$(basename $file) 2>/dev/null
     if [ $? -eq 0 ]; then
        recfile=$file
        break
     fi
  done
fi

# if one tape ordered list to process is found, recall it
if [ "$recfile"x != "0x" ]; then
  # create pointer (not lock) file for the ongoing tape recall
  mv -f $recfile $recfile.running
  # list of files is taken. Release lock on recall queue
  rm -f $LOCKDIR/recall.queue.lock    
    
  # create temporary working directory
  tmpdir=$(mktemp -d /tmp/tsmrecall.XXXXXXXX)
  cd $tmpdir

  # determine the GPFS storage pool with the largest availability of space
  goodpool=$($yamssShowPoolOccupancy -f $device)

  # generate filelist collection file
  let size=0
  let nfiles=0
  while read -r myline; do
    fn=$(echo $myline|awk '{print $4}')
    # file does not exist, skip
    if [ ! -f $fn ]; then
       continue
    else
       # modify atime in order to set the file as accessed
       touch -a -c $fn
    fi

    let fs=$(ls -l $fn|awk '{print $5}')
    let bs=$(ls -s $fn|awk '{print $1}')*512;
    # file is already on disk, skip
    if [ $bs -ge $fs ]; then
       continue
    elif [ "$RECALL_USE_FREE_GPFS_POOL"x = "yesx" -a $bs -eq 0 ]; then
       # place the stub file into the emptiest storage pool
       echo Placing file $fn into GPFS storage pool $goodpool
       $mmchattr -P $goodpool $fn 

       # check if file is ill placed
       if $mmlsattr -L $fn | egrep "^flags:" | egrep illplaced > /dev/null; then
         # file is found to be illplaced
         echo Warning: file $fn is found to be ill placed. Restriping it
         $mmrestripefile -p $fn
       fi

    fi

    let nfiles=$nfiles+1
    let size=$size+$fs

    echo $myline >> $(basename $recfile)
  done < $recfile.running

  # create a temporary directory to store filelist.ordered.collection into the filesystem, for unknown reasons
  if [ ! -d $SYSTEM_DIRECTORY_PATH/YAMSS_RECALL_TEMP ]; then
     mkdir $SYSTEM_DIRECTORY_PATH/YAMSS_RECALL_TEMP
  fi
  filelistdir=$(mktemp -d $SYSTEM_DIRECTORY_PATH/YAMSS_RECALL_TEMP/XXXXXXXX)

  echo $nfiles $size $filelistdir/$(basename $recfile) > $filelistdir/filelist.ordered.collection

  cp $(basename $recfile) $filelistdir/.

  echo Recall process started

  # start tape ordered recall
  startrectime=$(date +%s)
  glbvar=$(mktemp /tmp/glbvar.XXXXXXXX)
  $yamssWatchdog -t $RECALL_PROCESS_TIMEOUT $dsmrecall -d -filelist=$filelistdir/filelist.ordered.collection $mountpoint | while read -r myline; do
     # try to catch dsmrecall output to trace real time what it is doing
     let i=0
     # print line to stdout
     echo "$myline"
     for file in $(cat ./$(basename $recfile) | awk '{print $4}'); do
        let i=$i+1
        # catch file name on the line and exclude ANS9101I (e.g. when file is already on disk)
        if echo "$myline" | egrep -v "^ANS9101I " | egrep "^$file | $file | $file$" >/dev/null 2>&1; then
          # catch if it was succesful
          if echo "$myline" | egrep "^Recalling" 2>/dev/null | egrep "\[Done\]$" >/dev/null 2>&1; then
             # log success to sensor file
             echo REC OK $(date +%s) $file $(hostname) >> $STATDIR/sensor_recall
             echo arrayDone[$i]=\"success\" >> $glbvar
             break
           else
             # log fail to sensor file
             echo REC ERR $(date +%s) $file $(hostname) >> $STATDIR/sensor_recall
             echo arrayDone[$i]=\"failure\" >> $glbvar
             break
           fi
        fi
     done
  done

  stoprectime=$(date +%s)

  # remove the temporary directory
  rm -f $filelistdir/*
  rmdir $filelistdir

  . $glbvar
  rm -f $glbvar

  # log to sensor file any remaining file which might have been lost during processing
  let i=0
  for file in $(cat ./$(basename $recfile) | awk '{print $4}'); do
    let i=$i+1
    if [ ${arrayDone[$i]}"x" != "successx" -a ${arrayDone[$i]}"x" != "failurex" ]; then
       # check if file is already on disk
       IBMPMig=$($yamssGetDmAttr $file IBMPMig 2>/dev/null)
       if [ $? != 0 ]; then
         echo REC ERR $(date +%s) $file $(hostname) >> $STATDIR/sensor_recall
       fi
    fi
  done


  cd - > /dev/null
  rm -rf $tmpdir

  mystat=$(mktemp /tmp/tsmstat.XXXXXXXX)
  cat $recfile.running | awk '{print $4}' > $mystat

  # release pointer and lock for the recalled tape
  rm -f $recfile.running
  rm -f $LOCKDIR/recall.$(basename $recfile)

  # write out recall statistics
  tsize=$(for f in $(cat $mystat); do ls -l $f; done | awk '{t+=$5}END{printf("%d\n",t)}')
  for file in $(cat $mystat); do
     # creation time
     filetime=$(ls -l --time-style=+%s $file | awk '{print $6}')
     # file size in bytes
     filesize=$(ls -l $file | awk '{print $5}')
     # blocks of file on disk
     fileblocks=$(ls -s $file | awk '{print $1}')

     # was the recall completed?
     let ondisk=$fileblocks*1024
     if [ $ondisk -lt $filesize ]; then
        echo "File $file was not recalled. Blocks on disk give $ondisk bytes while file size is $filesize"
        rc=1
        stat=REC
     # was file migrated?
     elif $attr -g storm.migrated $file >/dev/null 2>&1; then 
        rc=0
        stat=REC
     else
        echo "File $file does not appear to be migrated, but is entirely on disk"
        rc=0
        stat=RES
     fi

     if [ "$stat"x != "RES"x ]; then
       extobjid=$($yamssGetDmAttr $file IBMPMig 2>/dev/null)
       rc_a=$?

        objectid=$($ng yamssDB2Query $TSM_SERVER $TSM_SERVER_DB_NAME $TSM_SERVER_DB_PORT $TSM_SERVER_ID $TSM_SERVER_PASSWORD "select objid from $TSM_SERVER_DB_NAME.spaceman_objects as sos left join $TSM_SERVER_DB_NAME.nodes nr on (sos.nodeid=nr.nodeid) left join $TSM_SERVER_DB_NAME.filespaces fs on (sos.fsid=fs.fsid) where nr.nodename='$TSM_PROXY_NODE' and fs.fsname='$mountpoint' and state=1 and extobjid=x'$extobjid'")
       rc_b=$?
       rc_c=1
       if [ "$objectid"x = "x" ]; then
         rc_b=1
       else
         volname=$(read_volume_name $objectid)
         rc_c=$?
       fi

       if [ $rc_a != 0 -o  $rc_b != 0 -o  $rc_c != 0 ]; then
         volname=null 
       fi
     else
       volname=null
     fi

     if [ $volname"x" = "x" ]; then
       volname=null 
     fi

     # get enqueue time from libattr extented attributes
     enqueuetime=$($attr -q -g TSMRecD $file 2>/dev/null)

     if [ $enqueuetime"x" = "x" ]; then
       enqueuetime=$(date +%s)
     fi

     # write stats to log file
     write_stat $STATDIR/recall $LOCKDIR/recall.write_stat $stat $rc $enqueuetime $startrectime $stoprectime $filetime $file $filesize $tsize $(hostname) $volname

     hostnam=$(hostname| cut -d. -f1)

     if [ $rc = "0" ]; then
       echo Recall of file $file succeded

       # update recall table if StoRM is used. Warning: error conditions are not handled. If restful service is unavailable recall table is silently not updated. To be fixed
       if [ "$RECALL_USE_STORM"x = "1x" ]; then
          for taskid in $($attr -q -g TSMRecT $file 2>/dev/null | tr "," " "); do 
             echo "Setting status=success for file $file and taskid $taskid"
             $yamssWatchdog -t 60 $curl -s -S -H "Content-Type:text/plain" -X PUT -d "status=0" http://$STORM_BACKEND_NODE:9998/recalltable/task/$taskid 2>/dev/null
          done

          # remove extended attribute with taskids
          $attr -q -r TSMRecT $file 2>/dev/null
       fi       

     else
 
       # if the file appears erronously as premigrated, this is a severe error and we have to restore the file
       status=$($dsmls $file | grep $(basename $file) | tail -n1 | awk '{print $4}')
       if [ "$status"x = "px" ]; then
          echo "Severe error. Recall for file $file failed but file appears as premigrated. Trying to restore it"

          # try to restore the file to migrated state, cross the fingers... A command to restore a damaged stub would be preferred. To be done

          # set environment variable used by the preload stat library
          export YAMSS_PRELOAD_STAT_FILE_NAME=$file
          LD_PRELOAD=$yamssPreloadStatLibrary $dsmmigrate $file > /dev/null

          # check if restore was successful, if not an alarm should be immediately filed... for the moment just log it
          status=$($dsmls $file | grep $(basename $file) | tail -n1 | awk '{print $4}')
          if [ "$status"x = "px" ]; then
             echo "Alarm! Restore of file $file failed. File is in inconsistent state!"
          elif [ "$status"x = "mx" ]; then
             echo "File $file restored to migrated state"
          else
             echo "Alarm! Restore of file $file failed. File is in inconsistent state!"
          fi 
          
       fi

       # extract from extended attributes the number of recalls actually (re)tried
       let fretry=$($attr -q -g TSMRecR $file 2>/dev/null)
       # if RECALL_MAX_RETRY allow for another trial do it and increase the counter in the extended attribute
       if [ $fretry -lt $RECALL_MAX_RETRY ]; then
          let n=$fretry+1
          # enqueue again the file for recall
          $yamssEnqueueRecallSingle $device $file $n
          echo "Recall of $file enqueued for retry $n (max $RECALL_MAX_RETRY)"
       else
          # recall failed, set extended attribute with the exact time of failure
          inode=$(ls -i $file | awk '{print $1}') 
          if [ "$inode"x != "x" ]; then
            # create error condition file
            touch $DMERRORDIR/$inode
          else
            echo Cannot determine inode number for file $file
          fi
          echo Recall of file $file failed

          # update recall table if StoRM is used. Warning: error conditions are not handled. If restful service is unavailable recall table is silently not updated. To be fixed
          if [ "$RECALL_USE_STORM"x = "1x" ]; then
             for taskid in $($attr -q -g TSMRecT $file 2>/dev/null | tr "," " "); do 
                echo "Setting status=failure for file $file and taskid $taskid"
                $yamssWatchdog -t 60 $curl -s -S -H "Content-Type:text/plain" -X PUT -d "status=3" http://$STORM_BACKEND_NODE:9998/recalltable/task/$taskid 2>/dev/null
             done

             # remove extended attribute with taskids
             $attr -q -r TSMRecT $file 2>/dev/null

          fi

       fi
     fi
  done
  rm -rf $mystat

else
  # release lock on recall queue
  rm -f $LOCKDIR/recall.queue.lock
  sleep 10
fi
