#!/bin/ksh
############################################################################
# Copyright 2008-2010 Istituto Nazionale di Fisica Nucleare
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
############################################################################

# Include global declarations and service routines.
. /usr/lpp/mmfs/bin/mmglobfuncs
. /usr/lpp/mmfs/bin/mmsdrfsdef

export device=$arg1

export mountpoint=$(cat /proc/mounts | grep "^/dev/$device " | awk '{print $2}')

. /usr/local/yamss/bin/yamssCommands

export SYSTEM_DIRECTORY_PATH=$mountpoint/system

export GPFS_rshPath="/usr/bin/ssh"

export hostnam=$(hostname|cut -d. -f1)

{ 
     # print PID for logger
     echo $$

     if [ ! -f $mountpoint/system/YAMSS_CONFIG/hsmConfig ]; then
        echo "Error: missing hsmConfig file in system directory"
        cleanupAndExit 0        
     fi

     . $mountpoint/system/YAMSS_CONFIG/hsmConfig


     # Check if this is the owner node of the TSM failover group
     hostnam=$(hostname|cut -d. -f1)
     ownerid=$(cat $mountpoint/.SpaceMan/hsmfsconfig.xml | grep Ownernode | cut -d">" -f2 | cut -d"<" -f1)
     ownernode=$($mmlscluster | awk '{print $1,$2}' | grep "^$ownerid " | awk '{print $2}' | cut -d. -f1)

     if [ "$ownernode"x = "x" -o "$hostnam"x = "x" -o "$ownernode"x != "$hostnam"x ]; then
       cleanupAndExit 0
     fi

     # remove stale migrate files if any
     rm -f $SYSTEM_DIRECTORY_PATH/YAMSS_MIGRATE/migrate.*
     rm -f $SYSTEM_DIRECTORY_PATH/YAMSS_MIGRATE/premigrate.*

     # read last scan time
     let LASTSCAN=$(cat $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan 2>/dev/null)
     if [ $LASTSCAN"x" == "x" ]; then
        let LASTSCAN=$(date +%s)
        echo $LASTSCAN > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan
     fi

     let NOW=$(date +%s)
     let DELAY=$NOW-$LASTSCAN

     # if in draining, exit without scan
     if [ -f $SYSTEM_DIRECTORY_PATH/YAMSS_DRAIN/migrate.drain ]; then
        echo Drain file found while starting policy, giving up
        cleanupAndExit 0
     fi
    
     if [ $DELAY -gt $MIGRATE_SCAN_FREQUENCY ]; then
        echo $NOW > $SYSTEM_DIRECTORY_PATH/YAMSS_STAT/lastscan

        for nodeName in $(echo $MIGRATE_NODE_LIST | tr "," " ") 
        do

           $mmcommon on1 $nodeName SHOW_NAME policyCommand $device -m $MIGRATE_RUNNING_THREADS -B $MIGRATE_FILES_PER_THREAD -N $MIGRATE_NODE_LIST -s /var/tmp
           rc=$? 

           # If the command completed successfully, or if there is an
           # unacceptable error, there is nothing more we can do.
           # Error messages and log enties should have been issued by mmremote.
           if [[ $rc -ne $MM_FsNotMounted && $rc -ne $MM_NotSupported &&
                 $rc -ne $MM_DaemonDown   && $rc -ne $MM_QuorumWait   ]]
           then 
             cleanupAndExit 0  # Always return zero; the actual rc is already logged.
           fi 
        done
        # If we get here, this means that we were not able to find a node
        # that meets the conditions for running the mmapplypolicy command.
        # Put an appropriate message in the log and return.
        print -- "$(date): $mmcmd: Unable to find a node on which to run mmapplypolicy $device"
     else
        let NEXT=$LASTSCAN+$MIGRATE_SCAN_FREQUENCY-$NOW
        echo $NEXT | awk '{mintime=$1/60; strmt=int(mintime+2); if(mintime<2) {strmt="2"}; print "Next filesystem scan expected in",strmt,"minutes"}'
        sleep 120
     fi
     cleanupAndExit 0

}

