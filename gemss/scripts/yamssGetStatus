#!/bin/bash
############################################################################
# Copyright 2008-2012 Istituto Nazionale di Fisica Nucleare
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
############################################################################

. /usr/local/yamss/bin/yamssCommands

echo
echo "Checking GPFS-TSM-YAMSS managed filesystems mounted on this node"

# Check if yamssMonitor is running
if [ ! -n "`/sbin/pidof -x yamssMonitor`" ]; then
   echo
   echo WARNING: yamssMonitor process is not running on this node
fi

found=0
while read -r myline; do
   devname=$(basename -- $(echo "$myline"|awk '{print $1}'))
   mntpoint=$(echo "$myline"|awk '{print $2}')
   fstype=$(echo "$myline"|awk '{print $3}')

   if [ $1"x" != "x" -a $1"x" = $devname"x" ]; then
      found=1
   elif [ $1"x" != "x" -a $1"x" != $devname"x" ]; then
      continue
   fi

   # if filesystem is not a gpfs continue
   if [ "$fstype"x != "gpfsx" ]; then
     if [ $1"x" != "x" ]; then
        echo Specified filesystem $devname is not GPFS
        echo
        exit 1
     fi
     continue
   fi

   # check if configuration file does exist
   if [ ! -f $mntpoint/system/YAMSS_CONFIG/hsmConfig ]; then
     if [ $1"x" != "x" ]; then
       echo
       echo "  Processing GPFS filesystem $devname mounted on $mntpoint"
       echo "   " $devname is not configured for yamss. Skipping it.
     fi
     continue
   fi

   echo
   echo "  Processing GPFS filesystem $devname mounted on $mntpoint"

   # Check if drain files are present
   if [ -f $mntpoint/system/YAMSS_DRAIN/recall.drain ]; then
      echo "   " $devname is in drain state for recalls
   fi
   if [ -f $mntpoint/system/YAMSS_DRAIN/migrate.drain ]; then
      echo "   " $devname is in drain state for migrations
   fi

   # Count running recall threads
   let nqueue=$(cat $mntpoint/system/YAMSS_RECALL/recall.queue 2>/dev/null | wc -l)
   echo "   " $devname has $nqueue files in recall queue

   # Count running recall threads
   let nrun=$(ls $mntpoint/system/YAMSS_RECALL/filelist.ordered.tape.*.running 2>/dev/null | wc -l)
   let nrunf=$(cat $mntpoint/system/YAMSS_RECALL/filelist.ordered.tape.*.running 2>/dev/null | wc -l)
   echo "   " $devname has $nrunf files in $nrun tapes being processed by recall threads

   # Count tapes waiting for being recalled
   let ntapes=$(ls $mntpoint/system/YAMSS_RECALL/filelist.ordered.tape.* 2>/dev/null | grep -v 00000000 | wc -l)
   let ntapesf=$(cat $mntpoint/system/YAMSS_RECALL/filelist.ordered.tape.* 2>/dev/null | wc -l)
   let ntapesfp=$(cat $mntpoint/system/YAMSS_RECALL/filelist.ordered.tape.00000000 2>/dev/null | wc -l)
   let ntapes=$ntapes-$nrun
   let ntapesf=$ntapesf-$nrunf-$ntapesfp
   echo "   " $devname has $ntapesf files in $ntapes tapes waiting for recall threads
   if [ $ntapesfp = "1" ]; then
      str=file
   else
      str=files
   fi
   echo "   " $devname has $ntapesfp problematic $str found while sorting recalls

   let npmig=$(ls $mntpoint/system/YAMSS_MIGRATE/premigrate.running.* 2>/dev/null | wc -l)
   echo "   " $devname has $npmig premigration threads running
   let nmig=$(ls $mntpoint/system/YAMSS_MIGRATE/migrate.running.* 2>/dev/null | wc -l)
   echo "   " $devname has $nmig migration threads running

done < /proc/mounts

if [ $1"x" != "x" -a $found = "0" ]; then
   echo
   echo $1 is not mounted on this node
fi

echo
